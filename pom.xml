<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>com.felixalacampagne</groupId>
   <artifactId>recivaportal</artifactId>
   <!-- 
        <version>${recivaportal.app.version}</version>
        
        In yet another attack of the modern tool developers living in a parallel universe the maven geniuses
        have decreed that the annoyance of the absurd requirement to be specifiedrequirement everywhere
        shall be exacerbated by prevent use of a variable to propgate the same version into all the
        idiotic places it is required.
        
        Instead each time the version is changed ALL of the dependent files must also be changed and then
        re-added to the source control system.
        There solution to the issue they created:
        mvn versions:set -DnewVersion=0.0.2-SNAPSHOT
    -->
   <version>0.0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
   <name>recivalportal-master</name>

   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- JRE version must be specified in a plugin block now, see below -->
      <!-- maven.compiler.source>1.8</maven.compiler.source -->
      <!-- maven.compiler.target>1.8</maven.compiler.target -->
      <maven.deploy.plugin.version></maven.deploy.plugin.version>
      
      
   </properties>

   <modules>
      <module>recivaportal-app</module>
   </modules>
   <profiles>
      <profile>
         <id>tomcat</id>
         <modules>
            <module>recivaportal-tomcat</module>
         </modules>
      </profile>
      <profile>
         <id>jetty</id>
         <activation>
            <activeByDefault>true</activeByDefault>
         </activation>
         <modules>
            <module>recivaportal-jetty</module>
         </modules>
      </profile>
   </profiles>

   <dependencies>
      <dependency>
         <groupId>jakarta.servlet</groupId>
         <artifactId>jakarta.servlet-api</artifactId>
         <version>5.0.0</version>
      </dependency>
         <!-- https://mvnrepository.com/artifact/jakarta.ws.rs/jakarta.ws.rs-api -->
      <dependency>
         <groupId>jakarta.ws.rs</groupId>
         <artifactId>jakarta.ws.rs-api</artifactId>
         <version>3.0.0</version>
      </dependency>
      <!-- It seems this jakarta/jersey magic is another of the ridiculous Java interface/implementations
        obfuscations designed to make everything as complex as possible. It seem 'jakarta' is the
        interface but the actual implimentation is the 'jersey' stuff. There are of course very many
        artifacts to choose from with next to no explanation as to what is really needed.
      -->
      <!-- https://mvnrepository.com/artifact/org.glassfish.jersey.containers/jersey-container-servlet -->
      <dependency>
         <groupId>org.glassfish.jersey.containers</groupId>
         <artifactId>jersey-container-servlet</artifactId>
         <version>3.0.0</version>
      </dependency>
      <!-- https://mvnrepository.com/artifact/org.glassfish.jersey.inject/jersey-hk2 -->
      <dependency>
         <groupId>org.glassfish.jersey.inject</groupId>
         <artifactId>jersey-hk2</artifactId>
         <version>3.0.0</version>
      </dependency> 
      
      <!-- This particular bit of magic is required to suppress the enigmatic and completely meaningless message at startup:
      org.glassfish.jersey.server.wadl.WadlFeature configure
      WARNING: JAXBContext implementation could not be found. WADL feature is disabled 
      -->
      <!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime -->
      <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-runtime</artifactId>
         <version>3.0.0</version>
      </dependency>
      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-api</artifactId>
         <version>2.0.0-alpha1</version>
      </dependency>
      <dependency>
         <groupId>ch.qos.logback</groupId>
         <artifactId>logback-core</artifactId>
         <version>1.3.0-alpha5</version>
      </dependency>
      <dependency>
         <groupId>ch.qos.logback</groupId>
         <artifactId>logback-classic</artifactId>
         <version>1.3.0-alpha5</version>
      </dependency>
   </dependencies>
   <!-- All this to tell it to use Java 11  -->
   <build>
      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.0</version>
            <configuration>
               <release>11</release>  <!--or <release>10</release>-->
            </configuration>
         </plugin>

      <!-- Another example of something trivial being made enormously complicated by the modern tools:
           Deploy the built war file to the tomcat webapps directory without having to fork around messing
           with a working tomcat configuration.
           
           Great, you think, when you realise there is even a pre-defined keyword for this: 'deploy'.
           Alas the maven geniuses have hijacked the normal usage of this to mean sending your file to
           some remote place which will never exist, unlike the webserver webapps directory.
           So the first thing is to figure out how to disable the default action. Took alot of Googling
           but eventually found it...
           Then how to simply copy a file. Also a non-trivial task. It appears that it is expected that
           the server is somehow configured to accept files using a url. Well, that's the last thing I want!
           Especially as all I need to do is copy the war file to the 'webapps' directory. 
           After a lot of confusion I finally managed to get it to work. So now a simple compile and package
           into the war can be done with "mvn install". To send the war file to tomcat after the packaging
           use 'mvn install deploy'.
           Now will have to figure out how to hide the name of my webserver in a workspace variable which
           does not form part of the project.
           Also need to synchronize the versions - why on earth doesn't no version mean the latest???? 
       -->
         <plugin>
            <artifactId>maven-deploy-plugin</artifactId>
            <!-- Why the hell do these things all have to have a version, why not use the latezt 
                 or whatever is most appropriate to the mvn installation or whatever -->
            <version>${maven.deploy.plugin.version}2.8.2</version> 
            <executions>
               <execution>
                  <id>default-deploy</id>
                  <phase>none</phase>
               </execution>
            </executions>
         </plugin>
      </plugins>
   </build>
</project>